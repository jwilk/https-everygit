#!/usr/bin/env perl

# Copyright Â© 2017 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

use strict;
use warnings;

use Cwd qw();
use English qw(-no_match_vars);
use Fcntl qw(O_RDWR O_CREAT O_EXCL);
use File::Spec ();
use FindBin ();

my $basedir = "$FindBin::Bin/..";
$basedir = Cwd::realpath($basedir);
$basedir = File::Spec->abs2rel($basedir);

if (@ARGV != 1) {
    print { *STDERR } "Usage: $PROGRAM_NAME <repo>\n";
    print { *STDERR } "e.g.:  $PROGRAM_NAME git://git.example.org/foobar.git\n";
    exit 1;
}

my ($src_repo) = @ARGV;
$src_repo =~ m{\A(https?|git)://(([^/]++)\S+)\z} or die "malformed repo URL: $src_repo";
my ($proto, $location, $domain) = ($1, $2, $3);
$proto =~ s/s$//;
my $src = "$proto://$domain/";
my $dst = "https://$domain/";
$src_repo = "$proto://$location";
my $http_repo = "http://$location";
my $dst_repo = "https://$location";

my $path = "$basedir/data/$domain";
sysopen(my $fh, $path, O_RDWR | O_CREAT | O_EXCL) or die "$path: $ERRNO";
print { $fh } <<"EOF" ;
[rules]
$src = $dst

[tests]
$src_repo = $dst_repo
EOF
if ($src_repo ne $http_repo) {
    print { $fh } "$http_repo = $dst_repo\n";
}
print { $fh } "\n# vim:ft=dosini\n";
close($fh) or die "$path: $ERRNO";

# vim:ts=4 sts=4 sw=4 et
